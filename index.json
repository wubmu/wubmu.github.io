[{"categories":null,"content":"[toc] ","date":"2021-04-25","objectID":"/pytorch%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:0:0","tags":null,"title":"Pytorch官方案例(1) 快速入门","uri":"/pytorch%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"快速入门 这个一小节, 包含了机器学习中的基本流程 数据准备 创建模型 定义优化器 保存模型参数 加载模型 ","date":"2021-04-25","objectID":"/pytorch%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:1:0","tags":null,"title":"Pytorch官方案例(1) 快速入门","uri":"/pytorch%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"1. 数据准备 pytorch有两个处理数据的工具:torch.utils.data. DataLoader和torch.utils.data. Dataset Dataset存储样本及其相应的标签，而DataLoader在数据集上包装一个可迭代对象。 import torch from torch import nn from torch.utils.data import DataLoader from torchvision import datasets from torchvision.transforms import ToTensor, Lambda, Compose import matplotlib.pyplot as plt #从公开数据集下载训练数据 training_data = datasets.FashionMNIST( root=\"../data\", train=True, download=False,#如果需要下载改为True transform=ToTensor(), ) #从公开数据集下载测试数据 test_data = datasets.FashionMNIST( root=\"../data\", train=False, download=False, transform=ToTensor(), ) 我们把Dataset当作一个参数传给DataLoader. 这个迭代器, 支持自动批处理, 采样 随机打乱数据, 多进程加载数据. 这里我们定义batch大小为64, Dataloader迭代器每次将会返回一个batch, 包含feature和labels batch_size = 64 #创建dataloaders train_dataloader = DataLoader(training_data, batch_size=batch_size) test_dataloader = DataLoader(test_data, batch_size=batch_size) for X, y in test_dataloader: print(\"X的维度[N,C,H,W]:\",X.shape) #[N,C,H,W] [在索引中的编号,通道,高,宽] print(\"y的维度: \", y.shape, y.dtype) break 输出： ","date":"2021-04-25","objectID":"/pytorch%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:1:1","tags":null,"title":"Pytorch官方案例(1) 快速入门","uri":"/pytorch%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"2. 模型创建 pytorch定义神经网络, 需要创建一个类继承nn. Module. __init__ : 定义网络层数 forword : 定义数据在网络中的流向 # 如果有GPU采用gpu加速训练 device = \"cuda\" if torch.cuda.is_available() else \"cpu\" # 定义模型 class DNN(nn.Module): def __init__(self): super(DNN, self).__init__() self.flatten = nn.Flatten() #原始数据是[1,28,28],把它拉直 变成[28*28]一维 self.linear_relu_stack = nn.Sequential( nn.Linear(28*28, 512), nn.ReLU(), nn.Linear(512, 512), nn.ReLU(), nn.Linear(512, 10), #有10个类别 nn.ReLU() ) def forward(self, x): x = self.flatten(x) x = self.linear_relu_stack(x) return x model = DNN().to(device) print(model) 输出 ","date":"2021-04-25","objectID":"/pytorch%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:1:2","tags":null,"title":"Pytorch官方案例(1) 快速入门","uri":"/pytorch%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"3. 定义优化器和损失函数 loss_fn = nn.CrossEntropyLoss() optimizer = torch.optim.Adam(model.parameters(), lr=0.001) 在训练过程中，在单次循环中, 模型需要对训练数据做预测, 并且反向传播更新模型参数 def train(dataloader, model, loss_fn, optimizer): size = len(dataloader.dataset) for batch, (X, y) in enumerate(dataloader): X, y = X.to(device), y.to(device) # 前向传播和计算误差 pred = model(X) loss = loss_fn(pred, y) #交叉熵会自动对y进行one-hot #反向传播 optimizer.zero_grad() #梯度清零 loss.backward() #方向传播 optimizer.step() #更新模型 if batch % 100 == 0: #每100个batch打印一下误差 loss, current = loss.item(), batch*len(X) print(f'loss: {loss:\u003e7f} [{current:\u003e5d}/{size:\u003e5d}]') 我们还将对照测试数据集检查模型的性能，以确保模型是可学习的。 def test(dataloader, model): # size = len(dataloader.dataset) size = len(dataloader.dataset) model.eval() test_loss, correct = 0, 0 with torch.no_grad(): #测试集不用更新参数,不记录梯度 for X, y in dataloader: X , y = X.to(device), y.to(device) pred = model(X) test_loss += loss_fn(pred, y).item() correct += (pred.argmax(1) == y).type(torch.float).sum().item() #pred.argmax(1) 找到概率最大的索引位置, 即预测的label #(pred.argmax(1) == y) 是否与 y的label相等 #(pred.argmax(1) == y).type(torch.float).sum():统计true的个数 ,true转换成float为1 test_loss /= size correct /= size print(f\"Test Error: \\nAccuracy: {(100*correct):\u003e0.1f}%, Avg loss: {test_loss:\u003e8f} \\n\") 训练的过程需要迭代多次(epoch) epochs = 5 for t in range(epochs): print(f\"Epoch {t+1}\\n------------------------------\") train(train_dataloader, model, loss_fn, optimizer) test(test_dataloader, model) print(\"Done!\") out: Epoch 1 ------------------------------ loss: 2.298897 [ 0/60000] loss: 1.661566 [ 6400/60000] loss: 1.727862 [12800/60000] loss: 1.804164 [19200/60000] loss: 1.650022 [25600/60000] loss: 1.702805 [32000/60000] loss: 1.369759 [38400/60000] loss: 1.585616 [44800/60000] loss: 1.414686 [51200/60000] loss: 1.726880 [57600/60000] Test Error: Accuracy: 35.1%, Avg loss: 0.026484 Epoch 2 ------------------------------ loss: 1.485116 [ 0/60000] loss: 1.520031 [ 6400/60000] loss: 1.653199 [12800/60000] loss: 1.769573 [19200/60000] loss: 1.478098 [25600/60000] loss: 1.689139 [32000/60000] loss: 1.349994 [38400/60000] loss: 1.552191 [44800/60000] loss: 1.387923 [51200/60000] loss: 1.632932 [57600/60000] Test Error: Accuracy: 36.9%, Avg loss: 0.025579 Epoch 3 ------------------------------ loss: 1.375883 [ 0/60000] loss: 1.485450 [ 6400/60000] loss: 1.643194 [12800/60000] loss: 1.745134 [19200/60000] loss: 1.489459 [25600/60000] loss: 1.683173 [32000/60000] loss: 1.332691 [38400/60000] loss: 1.527047 [44800/60000] loss: 1.088369 [51200/60000] loss: 1.412117 [57600/60000] Test Error: Accuracy: 56.1%, Avg loss: 0.019232 Epoch 4 ------------------------------ loss: 0.949627 [ 0/60000] loss: 1.063320 [ 6400/60000] loss: 1.107010 [12800/60000] loss: 1.242038 [19200/60000] loss: 1.226886 [25600/60000] loss: 1.273832 [32000/60000] loss: 1.029097 [38400/60000] loss: 1.310232 [44800/60000] loss: 0.952710 [51200/60000] loss: 1.395312 [57600/60000] Test Error: Accuracy: 56.5%, Avg loss: 0.018658 Epoch 5 ------------------------------ loss: 0.894558 [ 0/60000] loss: 1.040670 [ 6400/60000] loss: 1.136559 [12800/60000] loss: 1.185049 [19200/60000] loss: 1.184287 [25600/60000] loss: 1.242846 [32000/60000] loss: 0.998598 [38400/60000] loss: 1.194539 [44800/60000] loss: 0.940521 [51200/60000] loss: 1.336018 [57600/60000] Test Error: Accuracy: 56.6%, Avg loss: 0.018490 Done! ","date":"2021-04-25","objectID":"/pytorch%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:1:3","tags":null,"title":"Pytorch官方案例(1) 快速入门","uri":"/pytorch%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"4. 模型存储 torch.save(model.state_dict(),\"DNN.pth\") print(\"把模型参数保存在DNN.pth\") ","date":"2021-04-25","objectID":"/pytorch%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:1:4","tags":null,"title":"Pytorch官方案例(1) 快速入门","uri":"/pytorch%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"5. 加载模型 加载模型的过程包括重新创建模型结构并将参数加载到其中。 model2 = DNN() model.load_state_dict(torch.load(\"DNN.pth\")) # 做一次预测 classes = [ \"T-shirt/top\", \"Trouser\", \"Pullover\", \"Dress\", \"Coat\", \"Sandal\", \"Shirt\", \"Sneaker\", \"Bag\", \"Ankle boot\", ] model2.eval() x, y = test_data[3][0], test_data[3][1] with torch.no_grad(): pred = model2(x) predicted, actual = classes[pred[0].argmax(0)], classes[y] print(f'预测值: \"{predicted}\", 实际值: \"{actual}\"') ","date":"2021-04-25","objectID":"/pytorch%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/:1:5","tags":null,"title":"Pytorch官方案例(1) 快速入门","uri":"/pytorch%E5%AE%98%E6%96%B9%E6%A1%88%E4%BE%8B1-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"},{"categories":null,"content":"创建IDEA项目 点击New project 找到Maven，勾选钩选Create from archetype选择模板，选择webapp模板，完成后点击next继续。 填写你自己的GroupId和ArtifactId就项目命。 选择Maven的地址 填写项目命finish就可以 运行测试下web项目。 点击 Edit Configurations 点击添加，找到 tomcat local 点击 deployment 的添加把刚刚建的项目导进来 点击ok就可以了 右上角会多出来一个 直接run运行 ","date":"2018-12-27","objectID":"/idea%E6%9E%84%E5%BB%BAmavenssm/:0:1","tags":null,"title":"IDEA构建Maven＋SSM","uri":"/idea%E6%9E%84%E5%BB%BAmavenssm/"},{"categories":null,"content":"SSM项目配置 更改pom.xml文件 \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e \u003cgroupId\u003eo2o\u003c/groupId\u003e \u003cartifactId\u003eo2o\u003c/artifactId\u003e \u003cversion\u003e1.0-SNAPSHOT\u003c/version\u003e \u003cpackaging\u003ewar\u003c/packaging\u003e \u003cname\u003eo2o Maven Webapp\u003c/name\u003e \u003c!-- FIXME change it to the project's website --\u003e \u003curl\u003ehttp://www.example.com\u003c/url\u003e \u003cproperties\u003e \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e \u003cmaven.compiler.source\u003e1.7\u003c/maven.compiler.source\u003e \u003cmaven.compiler.target\u003e1.7\u003c/maven.compiler.target\u003e \u003c!-- 设置项目编码编码 --\u003e \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e \u003cproject.reporting.outputEncoding\u003eUTF-8\u003c/project.reporting.outputEncoding\u003e \u003c!-- spring版本号 --\u003e \u003cspring.version\u003e4.3.5.RELEASE\u003c/spring.version\u003e \u003c!-- mybatis版本号 --\u003e \u003cmybatis.version\u003e3.4.1\u003c/mybatis.version\u003e \u003c!-- log4j日志包版本号 --\u003e \u003cslf4j.version\u003e1.7.18\u003c/slf4j.version\u003e \u003clog4j.version\u003e1.2.17\u003c/log4j.version\u003e \u003c/properties\u003e \u003cdependencies\u003e \u003c!-- java ee --\u003e \u003cdependency\u003e \u003cgroupId\u003ejavax\u003c/groupId\u003e \u003cartifactId\u003ejavaee-api\u003c/artifactId\u003e \u003cversion\u003e7.0\u003c/version\u003e \u003c/dependency\u003e \u003c!-- Spring --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-core\u003c/artifactId\u003e \u003cversion\u003e${spring.version}\u003c/version\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-beans\u003c/artifactId\u003e \u003cversion\u003e${spring.version}\u003c/version\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-context\u003c/artifactId\u003e \u003cversion\u003e${spring.version}\u003c/version\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-jdbc\u003c/artifactId\u003e \u003cversion\u003e${spring.version}\u003c/version\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-tx\u003c/artifactId\u003e \u003cversion\u003e${spring.version}\u003c/version\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-web\u003c/artifactId\u003e \u003cversion\u003e${spring.version}\u003c/version\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-webmvc\u003c/artifactId\u003e \u003cversion\u003e${spring.version}\u003c/version\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-test\u003c/artifactId\u003e \u003cversion\u003e${spring.version}\u003c/version\u003e \u003c/dependency\u003e \u003c!-- 添加jstl依赖 --\u003e \u003cdependency\u003e \u003cgroupId\u003ejstl\u003c/groupId\u003e \u003cartifactId\u003ejstl\u003c/artifactId\u003e \u003cversion\u003e1.2\u003c/version\u003e \u003c/dependency\u003e \u003c!-- 添加日志相关jar包 --\u003e \u003cdependency\u003e \u003cgroupId\u003elog4j\u003c/groupId\u003e \u003cartifactId\u003elog4j\u003c/artifactId\u003e \u003cversion\u003e${log4j.version}\u003c/version\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.slf4j\u003c/groupId\u003e \u003cartifactId\u003eslf4j-api\u003c/artifactId\u003e \u003cversion\u003e${slf4j.version}\u003c/version\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.slf4j\u003c/groupId\u003e \u003cartifactId\u003eslf4j-log4j12\u003c/artifactId\u003e \u003cversion\u003e${slf4j.version}\u003c/version\u003e \u003c/dependency\u003e \u003c!-- MyBatis --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.mybatis\u003c/groupId\u003e \u003cartifactId\u003emybatis\u003c/artifactId\u003e \u003cversion\u003e${mybatis.version}\u003c/version\u003e \u003c/dependency\u003e \u003c!-- mybatis/spring整合包 --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.mybatis\u003c/groupId\u003e \u003cartifactId\u003emybatis-spring\u003c/artifactId\u003e \u003cversion\u003e1.3.1\u003c/version\u003e \u003c/dependency\u003e \u003c!-- 数据库 --\u003e \u003cdependency\u003e \u003cgroupId\u003emysql\u003c/groupId\u003e \u003cartifactId\u003emysql-connector-java\u003c/artifactId\u003e \u003cversion\u003e5.1.41\u003c/version\u003e \u003cscope\u003eruntime\u003c/scope\u003e \u003c/dependency\u003e \u003c!-- 数据库连接池 --\u003e \u003cdependency\u003e \u003cgroupId\u003ecom.mchange\u003c/groupId\u003e \u003cartifactId\u003ec3p0\u003c/artifactId\u003e \u003cversion\u003e0.9.5.2\u003c/version\u003e \u003c/dependency\u003e \u003c!-- JSON --\u003e \u003cdependency\u003e \u003cgroupId\u003ecom.fasterxml.jackson.core\u003c/groupId\u003e \u003cartifactId\u003ejackson-databind\u003c/artifactId\u003e \u003cversion\u003e2.8.7\u003c/version\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003cbuild\u003e \u003cfinalName\u003eo2o\u003c/finalName\u003e \u003cpluginManagement\u003e\u003c!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cartifactId\u003emaven-clean-plugin\u003c/artifactId\u003e \u003cversion\u003e3.1.0\u003c/version\u003e \u003c/plugin\u003e \u003c!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_binding","date":"2018-12-27","objectID":"/idea%E6%9E%84%E5%BB%BAmavenssm/:0:2","tags":null,"title":"IDEA构建Maven＋SSM","uri":"/idea%E6%9E%84%E5%BB%BAmavenssm/"},{"categories":null,"content":"测试代码 代码目录 实体类创建(User) @Component public class User { private int id; private String username; private String password; public int getId() { return id; } public void setId(int id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } } 3 . UserDao创建(数据库层) public interface UserDao { List\u003cUser\u003e selectAllUser(); void save(User user); boolean update(User user); boolean delete(int id); User findById(int id); } 4 . UserService层创建 public interface UserService { public List\u003cUser\u003e findAll(); } 5 . UserServiceImpl @Service(\"/userService\") public class UserServiceImpl implements UserService { @Resource private UserDao userDao; @Override public List\u003cUser\u003e findAll() { return userDao.selectAllUser(); } } 6 . UserController @Controller @RequestMapping(\"/user\") public class UserController { @Resource UserService service; @RequestMapping(\"/showAll\") @ResponseBody public List\u003cUser\u003e showAll(){ System.out.println(service.findAll()); return service.findAll(); } } sql文件 create table user ( id int not null primary key, username varchar(255) null, password varchar(255) null ); 直接run运行 ","date":"2018-12-27","objectID":"/idea%E6%9E%84%E5%BB%BAmavenssm/:0:3","tags":null,"title":"IDEA构建Maven＋SSM","uri":"/idea%E6%9E%84%E5%BB%BAmavenssm/"},{"categories":null,"content":"Github项目地址","date":"2018-12-27","objectID":"/idea%E6%9E%84%E5%BB%BAmavenssm/:0:4","tags":null,"title":"IDEA构建Maven＋SSM","uri":"/idea%E6%9E%84%E5%BB%BAmavenssm/"}]